#!/usr/bin/env python2.7
# encoding: utf-8
'''
teams.checkstg -- check that info in SportsTG (via reportdata-*.csv) matches db

Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@author:     Murray Jensen
@copyright:  2018 Murray Jensen. All rights reserved.
@license:    GPLv3
@contact:    mjj@jensen-williams.id.au
'''
from __future__ import print_function

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from collections import namedtuple, OrderedDict
import csv
from logging import getLogger, basicConfig
import os
import sys

from sbcilib.teamsdb import SbciTeamsDB


__all__ = []
__version__ = 0.1
__date__ = '2018-07-29'
__updated__ = '$Date$'.split()[0]

_logger = getLogger(__file__)

DEBUG_RUN = 0
TEST_RUN = 0
PROFILE_RUN = 0


columnmap = OrderedDict((
    ('FIBA ID Number',                    'fiba_id'),
    ('Member ID',                         'member_id'),
    ('Member No.',                        'member_no'),
    ('First Name',                        'first_name'),
    ('Preferred Name',                    'preferred_name'),
    ('Family Name',                       'family_name'),
    ('Date of Birth',                     'date_of_birth'),
    ('Gender',                            'gender'),
    ('Parent/Guardian 1 Firstname',       'parent1_firstname'),
    ('Parent/Guardian 1 Surname',         'parent1_surname'),
    ('Parent/Guardian 1 Gender',          'parent1_gender'),
    ('Parent/Guardian 1 Mobile',          'parent1_mobile'),
    ('Parent/Guardian 1 Email',           'parent1_email'),
    ('Parent/Guardian 2 Firstname',       'parent2_firstname'),
    ('Parent/Guardian 2 Surname',         'parent2_surname'),
    ('Parent/Guardian 2 Gender',          'parent2_gender'),
    ('Parent/Guardian 2 Mobile',          'parent2_mobile'),
    ('Parent/Guardian 2 Email',           'parent2_email'),
    ('Address 1',                         'address1'),
    ('Address 2',                         'address2'),
    ('Suburb',                            'suburb'),
    ('Postal Code',                       'postal_code'),
    ('Telephone Number (Home)',           'phone_home'),
    ('Telephone Number (Work)',           'phone_work'),
    ('Telephone Number (Mobile)',         'mobile'),
    ('Email',                             'email'),
    ('Medical Notes',                     'medical_notes'),
    ('WWC Check Number',                  'wwc_check_number'),
    ('WWC Check Expiry',                  'wwc_check_expiry'),
    ('VJBL Level',                        'vjbl_level'),
    ('Custom Text Field 25',              'custom_text_field25'),
    ('Willingness to Volunteer ',         'willingness_to_volunteer'),
    ('Notes',                             'notes'),
    ('First Registered',                  'first_registered'),
    ('Last Registered',                   'last_registered'),
    ('Registered Until',                  'registered_until'),
    ('Last Updated',                      'last_updated'),
    ('Season',                            'season'),
    ('Season Player ?',                   'season_player'),
    ('Season Player Financial ?',         'season_player_financial'),
    ('Date Player created in Season',     'date_player_created_in_season'),
    ('Season Coach',                      'season_coach'),
    ('Date Coach created in Season',      'date_coach_created_in_season'),
    ('Season Misc',                       'season_misc'),
    ('Date Misc created in Season',       'date_misc_created_in_season'),
    ('RegoForm last used in Season',      'regoform_last_used_in_season'),
    ('Date RegoForm last used in Season', 'date_regoform_last_used_in_season'),
    ('Club Default Number',               'club_default_number'),
    ('School Name',                       'school_name'),
    ('School Suburb',                     'school_suburb'),
    ('BSB',                               'bsb'),
    ('Account Number',                    'account_number'),
    ('Account Name',                      'account_name'),
))


CSVRecord = namedtuple('CSVRecord', columnmap.viewvalues())


def main(argv=None):
    '''Command line options.'''

    basicConfig()

    if argv is not None:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (
        program_version, program_build_date)
    program_doclines = __import__('__main__').__doc__.split("\n")
    program_shortdesc = program_doclines[1]
    program_longdesc = program_doclines[3:]  # @UnusedVariable
    program_license = '''%s

  Created by Murray Jensen on %s.
  Copyright 2018 Murray Jensen. All rights reserved.

  Licensed under the GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v",
            "--verbose",
            dest="verbose",
            action="count",
            help="set verbosity level [default: %(default)s]")
        parser.add_argument(
            '-V',
            '--version',
            action='version',
            version=program_version_message)
        # Process arguments
        args = parser.parse_args()
    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE

    verbose = args.verbose
    if verbose > 0:
        print("Verbose mode on (level = {}).".format(verbose))
        print('Current Working Directory = {}'.format(os.getcwd()))

    try:
        db = SbciTeamsDB(verbose)

        csvfile = 'reportdata-members.csv'
        if verbose > 0:
            print('Reading Members CSV file: {} ...'.format(csvfile))
        csvrecords = []
        with open(csvfile) as fd:
            reader = csv.DictReader(fd)
            first_column_name = next(iter(columnmap))
            for d in reader:
                if d[first_column_name] == ' rows ':
                    break
                csvrecord = CSVRecord(**{columnmap[k]: d[k] for k in columnmap})
                print('{}'.format(csvrecord))
                csvrecords.append(csvrecord)
        if args.verbose > 0:
            print('{} CSV records read.'.format(len(csvrecords)))

        for csvrecord in csvrecords:
            pass

        for team in sorted(db.teams_query.all(), key=lambda x: x.team_name):
            if team.active != 'true':
                continue

            competition = db.competitions_query.get(team.competition_id)
            team_manager = db.people_query.get(team.team_manager_id)
            coach = db.people_query.get(team.coach_id)
            asst_coach = db.people_query.get(team.asst_coach_id)

            competition_name = db.competition_longname(competition)
            if verbose:
                print('{}, {}:'.format(team.team_name, competition_name))

            people = [
                (coach, 'Coach'),
                (team_manager, 'Team Manager'),
                (asst_coach, 'Assistant Coach'),
            ]

            for person, label in people:
                if person.id == 0:
                    continue

        return os.EX_OK

    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK

    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        _logger.exception('Exception')
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE


if __name__ == "__main__":
    if TEST_RUN:
        import doctest
        doctest.testmod()
    if PROFILE_RUN:
        import cProfile
        import pstats
        profile_filename = 'teams.readtest_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(os.EX_OK)
    sys.exit(main())
