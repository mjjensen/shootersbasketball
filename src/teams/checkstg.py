#!/usr/bin/env python2.7
# encoding: utf-8
'''
teams.checkstg -- check that info in SportsTG (via reportdata-*.csv) matches db

Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@author:     Murray Jensen
@copyright:  2018 Murray Jensen. All rights reserved.
@license:    GPLv3
@contact:    mjj@jensen-williams.id.au
'''
from __future__ import print_function

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from logging import getLogger, basicConfig
import os
import sys

from sbcilib.sportstg import MembersReadCSV
from sbcilib.teamsdb import SbciTeamsDB, PersonRole


__all__ = []
__version__ = 0.1
__date__ = '2018-07-29'
__updated__ = '$Date$'.split()[0]

_logger = getLogger(__file__)

DEBUG_RUN = 0
TEST_RUN = 0
PROFILE_RUN = 0


def main(argv=None):
    '''Command line options.'''

    basicConfig()

    if argv is not None:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (
        program_version, program_build_date)
    program_doclines = __import__('__main__').__doc__.split("\n")
    program_shortdesc = program_doclines[1]
    program_longdesc = program_doclines[3:]  # @UnusedVariable
    program_license = '''%s

  Created by Murray Jensen on %s.
  Copyright 2018 Murray Jensen. All rights reserved.

  Licensed under the GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v",
            "--verbose",
            dest="verbose",
            action="count",
            help="set verbosity level [default: %(default)s]")
        parser.add_argument(
            '-V',
            '--version',
            action='version',
            version=program_version_message)
        # Process arguments
        args = parser.parse_args()
    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE

    verbose = args.verbose
    if verbose > 0:
        print("Verbose mode on (level = {}).".format(verbose))
        print('Current Working Directory = {}'.format(os.getcwd()))

    try:
        db = SbciTeamsDB(verbose)

        csvrecords = MembersReadCSV('reportdata-members.csv', verbose)

        for team in sorted(db.teams_query.all(), key=lambda x: x.team_name):
            if team.active != 'true':
                continue

            competition = db.competitions_query.get(team.competition_id)
            team_manager = db.people_query.get(team.team_manager_id)
            coach = db.people_query.get(team.coach_id)
            asst_coach = db.people_query.get(team.asst_coach_id)

            competition_name = db.competition_longname(competition)
            if verbose:
                print('{}, {}:'.format(team.team_name, competition_name))

            people = [
                (coach, PersonRole.COACH),
                (team_manager, PersonRole.TEAM_MANAGER),
                (asst_coach, PersonRole.ASSISTANT_COACH),
            ]

            for person, role in people:
                if person.id == 0:
                    continue

                csvmatches = []
                for csvrecord in csvrecords:
                    name = csvrecord.first_name + ' ' + csvrecord.family_name
                    if name.lower() == person.name.lower():
                        csvmatches.append(csvrecord)

                nmatches = len(csvmatches)
                if nmatches == 0:
                    raise RuntimeError('{} has no SportsTG record!'
                                       .format(person.name))
                elif nmatches > 1:
                    raise RuntimeError('{} matches more than 1 SportsTG record!'
                                       .format(person.name))

        return os.EX_OK

    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK

    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        _logger.exception('Exception')
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE


if __name__ == "__main__":
    if TEST_RUN:
        import doctest
        doctest.testmod()
    if PROFILE_RUN:
        import cProfile
        import pstats
        profile_filename = 'teams.readtest_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(os.EX_OK)
    sys.exit(main())
