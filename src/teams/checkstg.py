#!/usr/bin/env python2.7
# encoding: utf-8
'''
checkstg -- check that info in SportsTG matches the database

checkstg is a program that reads a SportsTG CSV file and checks that it matches
the database.
--
Note: basic program structure based on code generated by PyDev (Eclipse plugin)
      via New->PyDev Module command and the "CLI (argparse)" Module template

@version:    0.1
@created:    2018-07-29
@author:     Murray Jensen
@copyright:  2018 Murray Jensen. All rights reserved.
@license:    Apache License 2.0
@contact:    mjj@jensen-williams.id.au
$Date$
$Author$
$Revision$
'''
from __future__ import print_function

import os
import sys

from sbcilib.sportstg import stg_members_csvinfo
from sbcilib.teamsdb import SbciTeamsDB, TeamRole, competition_longname,\
    is_under18
from sbcilib.utils import SbciMain, read_csv


class Main(SbciMain):

    def main(self):
        try:
            verbose = self.args.verbose
            if verbose > 0:
                print('Current Working Directory = {}'.format(os.getcwd()))

            db = SbciTeamsDB(verbose)

            member_records = read_csv('reportdata-members.csv',
                                      stg_members_csvinfo, verbose)

            for team in sorted(db.teams_query.all(), key=lambda x: x.team_name):
                if team.active != 'true':
                    continue

                competition = db.competitions_query.get(team.competition_id)
                compname = competition_longname(competition)

                coach = db.people_query.get(team.coach_id)
                asst_coach = db.people_query.get(team.asst_coach_id)
                team_manager = db.people_query.get(team.team_manager_id)

                if verbose:
                    print('{}, {}:'.format(team.team_name, compname))

                team_roles = [
                    (TeamRole.COACH, coach),
                    (TeamRole.TEAM_MANAGER, team_manager),
                    (TeamRole.ASSISTANT_COACH, asst_coach),
                ]

                for role, person in team_roles:
                    if person is None or person.id == 0:
                        continue

                    member_matches = []
                    for record in member_records:
                        name = record.first_name + u' ' + record.family_name
                        # print('{}|{}|{}'.format(type(record.first_name),
                        #                         type(record.family_name),
                        #                         type(person.name)))
                        if name.lower() == person.name.lower():
                            member_matches.append(record)

                    nmatches = len(member_matches)
                    if nmatches == 0:
                        raise RuntimeError('{} has no SportsTG record!'
                                           .format(person.name))
                    elif nmatches > 1:
                        raise RuntimeError('{} matches more than 1 SportsTG '
                                           'record!'.format(person.name))

                    member_record = member_matches[0]
                    need_update = False
                    if verbose > 0:
                        result = '{}: {}'.format(role.alt_value, person.name)

                    if person.email != member_record.email:
                        if verbose > 0:
                            result += ' +EMAIL'
                        need_update = True

                    if person.mobile != member_record.mobile:
                        if verbose > 0:
                            result += ' +MOBILE'
                        need_update = True

                    if not is_under18(person):

                        if person.wwc_number != member_record.wwc_check_number:
                            if verbose > 0:
                                result += ' +WWCNUM'
                            need_update = True

                        if (person.wwc_expiry.date() !=
                                member_record.wwc_check_expiry):
                            if verbose > 0:
                                result += ' +WWCEXP'
                            need_update = True

                    if person.dob.date() != member_record.date_of_birth:
                        if verbose > 0:
                            result += ' +DOB'
                        need_update = True

                    need_role_update = False
                    if role == TeamRole.COACH:
                        need_role_update = (not member_record.season_coach)
                    if role == TeamRole.TEAM_MANAGER:
                        need_role_update = (not member_record.season_misc)
                    if need_role_update:
                        if verbose > 0:
                            result += ' +{}'.format(role.name)
                        need_update = True

                    if verbose > 0:
                        if need_update:
                            print('**', end='')
                        print('\t{}.'.format(result))
                    elif need_update:
                        print('\t{}: {} NEEDS UPDATE!'
                              .format(role.alt_value, person.name))
            return os.EX_OK
        except KeyboardInterrupt:
            print('\nGot Interrupted!')
            return os.EX_SOFTWARE


def main():
    '''function suitable for running via setuptools entry point'''
    return Main.setuptools_entry()


if __name__ == '__main__':
    sys.exit(main())
