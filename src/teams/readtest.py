#!/usr/bin/env python2.7
# encoding: utf-8
'''
teams.readtest -- test reading of teams sqlite3 database

Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@author:     Murray Jensen
@copyright:  2016 Murray Jensen. All rights reserved.
@license:    GPLv3
@contact:    mjj@jensen-williams.id.au
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
import json
from logging import getLogger, basicConfig
import os
import re
import sys
import urllib2

from sqlalchemy import create_engine
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session


__all__ = []
__version__ = 0.1
__date__ = '2016-04-29'
__updated__ = '$Date$'.split()[0]

DEBUG_RUN = 0
TEST_RUN = 0
PROFILE_RUN = 0


_logger = getLogger(__name__)
_checked = {}


def competition_name(record):
    ''''''
    if record.gender is 'F':
        gender = 'G'
    else:
        gender = 'B'
    return str(record.age_group) + gender + str(record.section)


def check_person(args, config, record):
    ''''''

    id = record.id  # @ReservedAssignment
    name = record.name.encode('utf8')
    # email = record.email
    # mobile = record.mobile
    wwcn = record.wwc_number
    # wwce = record.wwc_expiry
    # post = record.postal_address

    if id in _checked:
        return _checked[id]

    try:
        if id == 0:
            result = True
            return result

        m = re.match(config['wwcncheckre'], wwcn)
        if not m:
            if not re.match(config['wwcnskipre'], wwcn):
                print('Bad wwc card number for {}: {}'.format(name, wwcn))
                result = False
            else:
                result = True
            return result

        cardnumber = m.group(1).upper()
        lastname = '%20'.join(name.split()[1:])

        wwcurl = config['wwcurlfmt'].format(cardnumber, lastname)

        contents = urllib2.urlopen(wwcurl).read()

        for line in contents.splitlines():

            m = re.match(config['wwcresultre'], line)
            if not m:
                continue

            success, expired, notvalid = m.group(2, 3, 4)
            if not success:
                if expired:
                    print('WWC number for ({},{}) has expired! ({}, {}, {})'
                          .format(cardnumber, lastname,
                                  record.name, record.mobile, record.email))
                    if args.verbose:
                        print('\t{}'.format(expired))
                else:
                    print('WWC number for ({},{}) is not valid! ({}, {}, {})'
                          .format(cardnumber, lastname,
                                  record.name, record.mobile, record.email))
                    if args.verbose:
                        print('\t{}'.format(notvalid))
            result = True
            break

        else:
            print('Bad http response for {}: {}'
                  .format(wwcurl, contents))
            result = False

        return result

    finally:
        _checked[id] = result


def main(argv=None):
    '''Command line options.'''

    basicConfig()

    if argv is not None:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (
        program_version, program_build_date)
    program_doclines = __import__('__main__').__doc__.split("\n")
    program_shortdesc = program_doclines[1]
    program_longdesc = program_doclines[3:]  # @UnusedVariable
    program_license = '''%s

  Created by Murray Jensen on %s.
  Copyright 2016 Murray Jensen. All rights reserved.

  Licensed under the GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v",
            "--verbose",
            dest="verbose",
            action="count",
            help="set verbosity level [default: %(default)s]")
        parser.add_argument(
            '-V',
            '--version',
            action='version',
            version=program_version_message)
        # Process arguments
        args = parser.parse_args()
    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return os.EX_USAGE

    if args.verbose > 0:
        print("Verbose mode on")

    try:
        config = {}
        with open('config.json', 'r') as fd:
            config = json.load(fd)
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(' ' * len(program_name) + "  for help use --help")
        return os.EX_CONFIG

    try:
        Base = automap_base()
        engine = create_engine(config['database'])
        Base.prepare(engine, reflect=True)

        Competitions = Base.classes.competitions
        Venues = Base.classes.venues
        People = Base.classes.people
        Teams = Base.classes.teams
        Sessions = Base.classes.sessions

        dbsession = Session(engine)

        competitions_query = dbsession.query(Competitions)
        venues_query = dbsession.query(Venues)              # @UnusedVariable
        people_query = dbsession.query(People)
        teams_query = dbsession.query(Teams)                # @UnusedVariable
        sessions_query = dbsession.query(Sessions)          # @UnusedVariable

        # competitions_all = competitions_query.all()         # @UnusedVariable
        # venues_all = venues_query.all()                     # @UnusedVariable
        # people_all = people_query.all()                     # @UnusedVariable
        teams_all = teams_query.all()                       # @UnusedVariable
        # sessions_all = sessions_query.all()                 # @UnusedVariable

        try:
            for team in teams_all:
                if not team.active:
                    continue

                competition = competitions_query.get(team.competition_id)
                team_manager = people_query.get(team.team_manager_id)
                coach = people_query.get(team.coach_id)
                asst_coach = people_query.get(team.asst_coach_id)

                print('{}, {}: coach {}, asst_coach {}, team manager {}'
                      .format(team.team_name, competition_name(competition),
                              coach.name, asst_coach.name, team_manager.name))

                if not check_person(args, config, coach):
                    break
                if not check_person(args, config, asst_coach):
                    break
                if not check_person(args, config, team_manager):
                    break

        except BaseException:
            _logger.exception('Exception')
            return os.EX_OSERR

        return os.EX_OK

    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK

    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        _logger.exception('Exception')
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return os.EX_USAGE


if __name__ == "__main__":
    if TEST_RUN:
        import doctest
        doctest.testmod()
    if PROFILE_RUN:
        import cProfile
        import pstats
        profile_filename = 'teams.readtest_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(os.EX_OK)
    sys.exit(main())
