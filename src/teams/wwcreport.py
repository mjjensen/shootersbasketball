#!/usr/bin/env python2.7
# encoding: utf-8
'''
teams.wwcreport -- produce xlsx file containing WWC info for HBA

Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@author:     Murray Jensen
@copyright:  2018 Murray Jensen. All rights reserved.
@license:    GPLv3
@contact:    mjj@jensen-williams.id.au
'''
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import datetime
from logging import getLogger, basicConfig
import os
import re
import sys

import xlsxwriter

from sbcilib.teamsdb import SbciTeamsDB


__all__ = []
__version__ = 0.1
__date__ = '2018-07-08'
__updated__ = '$Date$'.split()[0]

_logger = getLogger(__file__)

DEBUG_RUN = 0
TEST_RUN = 0
PROFILE_RUN = 0


def main(argv=None):
    '''Command line options.'''

    basicConfig()

    if argv is not None:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (
        program_version, program_build_date)
    program_doclines = __import__('__main__').__doc__.split("\n")
    program_shortdesc = program_doclines[1]
    program_longdesc = program_doclines[3:]  # @UnusedVariable
    program_license = '''%s

  Created by Murray Jensen on %s.
  Copyright 2018 Murray Jensen. All rights reserved.

  Licensed under the GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v",
            "--verbose",
            dest="verbose",
            action="count",
            help="set verbosity level [default: %(default)s]")
        parser.add_argument(
            '-V',
            '--version',
            action='version',
            version=program_version_message)
        parser.add_argument(
            '-o',
            '--outfile',
            dest='outfile',
            default='wwcreport.xlsx',
            help='file name of xlsx spreadsheet to write to'
        )
        # Process arguments
        args = parser.parse_args()
    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE

    verbose = args.verbose
    if verbose > 0:
        print("Verbose mode on")

    try:
        year = datetime.datetime.now().year

        db = SbciTeamsDB(verbose)

        workbook = xlsxwriter.Workbook(args.outfile)
        worksheet = workbook.add_worksheet()

        headings = [
            'Club Name',
            'Team Name',
            'Competition Name',
            'Coach First Name',
            'Coach Surname',
            'Coach DOB',
            'Coach Email',
            'Coach Mobile',
            'Coach WWCC',
            'Coach WWCC Expiry',
            'Coach Member Protection Delaration Signed',
            'TM First Name',
            'TM Surname',
            'TM DOB',
            'TM Email',
            'TM Mobile',
            'TM WWCC',
            'TM WWCC Expiry',
            'TM Member Protection Delaration Signed',
        ]

        # row 0 - column headings
        col = 0
        for heading in headings:
            worksheet.write(0, col, heading)
            col += 1

        # data starts from row 1
        row = 1
        for team in sorted(db.teams_query.all(), key=lambda x: x.team_name):
            if team.active != 'true':
                continue

            competition = db.competitions_query.get(team.competition_id)
            competition_name = db.competition_longname(competition)
            team_manager = db.people_query.get(team.team_manager_id)
            coach = db.people_query.get(team.coach_id)

            if verbose:
                print('{}, {}: coach {}, team manager {}'
                      .format(team.team_name, competition_name,
                              coach.name, team_manager.name))

            def date_massage(s):
                m = re.match(r'^(\d{2})/(\d{2})/(\d{4})$', s)
                if not m:
                    raise RuntimeError('bogus date!')
                return m.group(3) + '-' + m.group(2) + '-' + m.group(1)

            def write_one_person(row, col, person):
                firstname, lastname = person.name.decode('utf-8').split(' ', 1)
                worksheet.write(row, col + 0, firstname)
                worksheet.write(row, col + 1, lastname)
                worksheet.write(row, col + 2, person.dob)
                worksheet.write(row, col + 3, person.email)
                worksheet.write(row, col + 4, person.mobile)
                worksheet.write(row, col + 5, person.wwc_number)
                if person.wwc_number == 'Under 18':
                    yob = int(person.dob.split('-')[0])
                    if year - yob >= 18:
                        print('{} {} ({}) is no longer Under 18!'
                              .format(firstname, lastname, person.id))
                    worksheet.write(row, col + 6, 'Under 18')
                else:
                    worksheet.write(row, col + 6, person.wwc_expiry)
                worksheet.write(row, col + 7, 'No')

            worksheet.write(row, 0, 'Shooters Basketball Club')
            worksheet.write(row, 1, team.team_name)
            worksheet.write(row, 2, competition_name)
            write_one_person(row, 3, coach)
            write_one_person(row, 11, team_manager)

            row += 1

        workbook.close()
        return os.EX_OK

    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK

    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        _logger.exception('Exception')
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE


if __name__ == "__main__":
    if TEST_RUN:
        import doctest
        doctest.testmod()
    if PROFILE_RUN:
        import cProfile
        import pstats
        profile_filename = 'teams.readtest_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(os.EX_OK)
    sys.exit(main())
