#!/usr/bin/env python2.7
# encoding: utf-8
'''
teams.wwcreport -- produce xlsx file containing WWC info for HBA

Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@author:     Murray Jensen
@copyright:  2018 Murray Jensen. All rights reserved.
@license:    GPLv3
@contact:    mjj@jensen-williams.id.au
'''
from __future__ import print_function

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from logging import getLogger, basicConfig
import os
import re
import sys

import xlsxwriter

from sbcilib.teamsdb import SbciTeamsDB, WWCCheckStatus, PersonRole


__all__ = []
__version__ = 0.1
__date__ = '2018-07-08'
__updated__ = '$Date$'.split()[0]

_logger = getLogger(__file__)

DEBUG_RUN = 0
TEST_RUN = 0
PROFILE_RUN = 0


def main(argv=None):
    '''Command line options.'''

    basicConfig()

    if argv is not None:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (
        program_version, program_build_date)
    program_doclines = __import__('__main__').__doc__.split("\n")
    program_shortdesc = program_doclines[1]
    program_longdesc = program_doclines[3:]  # @UnusedVariable
    program_license = '''%s

  Created by Murray Jensen on %s.
  Copyright 2018 Murray Jensen. All rights reserved.

  Licensed under the GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v",
            "--verbose",
            dest="verbose",
            action="count",
            help="set verbosity level [default: %(default)s]")
        parser.add_argument(
            '-V',
            '--version',
            action='version',
            version=program_version_message)
        parser.add_argument(
            '-o',
            '--outfile',
            dest='outfile',
            default='wwcreport.xlsx',
            help='file name of xlsx spreadsheet to write to'
        )
        # Process arguments
        args = parser.parse_args()
    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE

    verbose = args.verbose
    if verbose > 0:
        print("Verbose mode on")

    try:
        db = SbciTeamsDB(verbose)

        workbook = xlsxwriter.Workbook(args.outfile)
        date_format = workbook.add_format({'num_format': 'dd/mm/yyyy'})
        right_align = workbook.add_format({'align': 'right'})
        worksheet = workbook.add_worksheet()

        headings = [
            'Club Name',
            'Team Name',
            'Competition Name',
            'Coach First Name',
            'Coach Surname',
            'Coach DOB',
            'Coach Email',
            'Coach Mobile',
            'Coach WWCC',
            'Coach WWCC Expiry',
            'Coach Member Protection Delaration Signed',
            'TM First Name',
            'TM Surname',
            'TM DOB',
            'TM Email',
            'TM Mobile',
            'TM WWCC',
            'TM WWCC Expiry',
            'TM Member Protection Delaration Signed',
        ]

        maxwidths = {}

        def write_a_cell(row, col, data, rjust=False):
            if rjust:
                worksheet.write_string(row, col, data, right_align)
            else:
                worksheet.write_string(row, col, data)
            width = len(data) + 1
            if col not in maxwidths or width > maxwidths[col]:
                maxwidths[col] = width

        def write_a_date(row, col, data):
            worksheet.write_datetime(row, col, data, date_format)
            if col not in maxwidths or 11 > maxwidths[col]:
                maxwidths[col] = 11

        def fixup_column_widths():
            for col, width in maxwidths.viewitems():
                worksheet.set_column(col, col, width)

        # row 0 - column headings
        col = 0
        for heading in headings:
            write_a_cell(0, col, heading)
            col += 1

        # data starts from row 1
        row = 1
        for team in sorted(db.teams_query.all(), key=lambda x: x.team_name):
            if team.active != 'true':
                continue

            competition = db.competitions_query.get(team.competition_id)
            competition_longname = db.competition_longname(competition)

            coach = db.people_query.get(team.coach_id)
            asst_coach = db.people_query.get(team.asst_coach_id)
            team_manager = db.people_query.get(team.team_manager_id)

            if verbose:
                print('{}, {}:'.format(team.team_name, competition_longname))

            team_roles = [
                (PersonRole.COACH, coach),
                (PersonRole.TEAM_MANAGER, team_manager),
                (PersonRole.ASSISTANT_COACH, asst_coach),
            ]

            for role, person in team_roles:
                if person.id == 0:
                    continue

                print('\t{}: {}, WWC Verification: ... '
                      .format(person.name, role.alt_value), end='')

                status, message, expiry = db.person_check_wwc(person, verbose)

                if status == WWCCheckStatus.SUCCESS:
                    print('{}, expiry={}'.format(status.name, expiry))
                    if person.wwc_expiry.date() != expiry:
                        print('NEED TO UPDATE WWC EXPIRY for {} ({}): {} => {}'
                              .format(person.name, person.id,
                                      person.wwc_expiry, expiry))
                else:
                    print('{}, {}'.format(status.name, message))

            def bv_mpd_signed(person):
                if (person.bv_mpd_expiry is not None and
                        person.bv_mpd_expiry.date() > db.end_of_season()):
                    return 'Yes'
                else:
                    return 'No'

            def date_massage(s):
                m = re.match(r'^(\d{2})/(\d{2})/(\d{4})$', s)
                if not m:
                    raise RuntimeError('bogus date!')
                return m.group(3) + '-' + m.group(2) + '-' + m.group(1)

            def write_one_person(row, col, person):
                firstname, lastname = person.name.decode('utf-8').split(' ', 1)
                write_a_cell(row, col + 0, firstname)
                write_a_cell(row, col + 1, lastname)
                write_a_date(row, col + 2, person.dob)
                write_a_cell(row, col + 3, person.email)
                write_a_cell(row, col + 4, person.mobile)
                if db.person_is_under18(person):
                    write_a_cell(row, col + 5, 'Under 18')
                    write_a_cell(row, col + 6, 'Under 18', True)
                else:
                    write_a_cell(row, col + 5, person.wwc_number)
                    write_a_date(row, col + 6, person.wwc_expiry)
                write_a_cell(row, col + 7, bv_mpd_signed(person))

            write_a_cell(row, 0, 'Shooters Basketball Club')
            write_a_cell(row, 1, team.team_name)
            write_a_cell(row, 2, competition_longname)

            write_one_person(row, 3, coach)
            write_one_person(row, 11, team_manager)

            row += 1

        fixup_column_widths()

        workbook.close()
        return os.EX_OK

    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK

    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        _logger.exception('Exception')
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE


if __name__ == "__main__":
    if TEST_RUN:
        import doctest
        doctest.testmod()
    if PROFILE_RUN:
        import cProfile
        import pstats
        profile_filename = 'teams.readtest_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(os.EX_OK)
    sys.exit(main())
