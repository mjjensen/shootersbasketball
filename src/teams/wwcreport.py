#!/usr/bin/env python2.7
# encoding: utf-8
'''
wwcreport -- produce xlsx file containing WWC info for HBA

produce xlsx file containing WWC info for HBA
--
Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@version:    0.1
@created:    2018-07-08
@author:     Murray Jensen
@copyright:  2018 Murray Jensen. All rights reserved.
@license:    Apache License 2.0
@contact:    mjj@jensen-williams.id.au
$Date$
$Author$
$Revision$
'''
from __future__ import print_function

import os
import re
import sys

import xlsxwriter

from sbcilib.teamsdb import SbciTeamsDB, TeamRole, competition_longname
from sbcilib.utils import SbciMain, end_of_season, is_under18
from sbcilib.wwc import wwc_check, WWCCheckStatus


class Main(SbciMain):

    def define_args(self):
        super(Main, self).define_args()

        self.parser.add_argument(
            '-o',
            '--outfile',
            dest='outfile',
            default='wwcreport.xlsx',
            help='file name of xlsx spreadsheet to write to'
        )

    def main(self):
        try:
            verbose = self.args.verbose

            db = SbciTeamsDB(verbose)

            workbook = xlsxwriter.Workbook(self.args.outfile)
            date_format = workbook.add_format({'num_format': 'dd/mm/yyyy'})
            right_align = workbook.add_format({'align': 'right'})
            worksheet = workbook.add_worksheet()

            headings = [
                'Club Name',
                'Team Name',
                'Competition Name',
                'Coach First Name',
                'Coach Surname',
                'Coach DOB',
                'Coach Email',
                'Coach Mobile',
                'Coach WWCC',
                'Coach WWCC Expiry',
                'Coach Member Protection Delaration Signed',
                'TM First Name',
                'TM Surname',
                'TM DOB',
                'TM Email',
                'TM Mobile',
                'TM WWCC',
                'TM WWCC Expiry',
                'TM Member Protection Delaration Signed',
            ]

            maxwidths = {}

            def write_a_cell(row, col, data, rjust=False):
                if data is None:
                    return
                if rjust:
                    worksheet.write_string(row, col, data, right_align)
                else:
                    worksheet.write_string(row, col, data)
                width = len(data) + 1
                if col not in maxwidths or width > maxwidths[col]:
                    maxwidths[col] = width

            def write_a_date(row, col, data):
                if data is None:
                    return
                worksheet.write_datetime(row, col, data, date_format)
                if col not in maxwidths or 11 > maxwidths[col]:
                    maxwidths[col] = 11

            def fixup_column_widths():
                for col, width in maxwidths.viewitems():
                    worksheet.set_column(col, col, width)

            # row 0 - column headings
            col = 0
            for heading in headings:
                write_a_cell(0, col, heading)
                col += 1

            # data starts from row 1
            row = 1
            for team in sorted(db.teams_query.all(), key=lambda x: x.team_name):
                if team.active != 'true':
                    continue

                if verbose:
                    print('{}'.format(team.team_name), end='')

                competition = db.competitions_query.get(team.competition_id)
                compname = competition_longname(competition)

                if verbose:
                    print(', {}:'.format(compname))

                coach = db.people_query.get(team.coach_id)
                asst_coach = db.people_query.get(team.asst_coach_id)
                team_manager = db.people_query.get(team.team_manager_id)

                team_roles = [
                    (TeamRole.COACH, coach),
                    (TeamRole.TEAM_MANAGER, team_manager),
                    (TeamRole.ASSISTANT_COACH, asst_coach),
                ]

                for role, person in team_roles:
                    if person is None or person.id == 0:
                        continue

                    print('\t{}: {}, WWC Verification: ... '
                          .format(person.name, role.alt_value), end='')

                    result = wwc_check(person, verbose)

                    if result.status == WWCCheckStatus.SUCCESS:
                        print('{}, expiry={}'
                              .format(result.status.name, result.expiry))
                        if person.wwc_expiry.date() != result.expiry:
                            print('NEED TO UPDATE WWC EXPIRY for {} ({}): '
                                  '{} => {}'.format(person.name,
                                                    person.id,
                                                    person.wwc_expiry,
                                                    result.expiry))
                    else:
                        print('{}, {}'
                              .format(result.status.name, result.message))

                def hba_mpd_signed(person):
                    if is_under18(person.dob):
                        return 'Under 18'
                    elif (person.bv_mpd_expiry is not None and
                            person.bv_mpd_expiry.date() > end_of_season()):
                        return 'Yes'
                    else:
                        return 'No'

                def date_massage(s):
                    m = re.match(r'^(\d{2})/(\d{2})/(\d{4})$', s)
                    if not m:
                        raise RuntimeError('bogus date!')
                    return m.group(3) + '-' + m.group(2) + '-' + m.group(1)

                def write_one_person(row, col, person):
                    if person is None:
                        return
                    fullname = person.name.decode('utf-8')
                    firstname, lastname = fullname.split(' ', 1)
                    write_a_cell(row, col + 0, firstname)
                    write_a_cell(row, col + 1, lastname)
                    write_a_date(row, col + 2, person.dob)
                    write_a_cell(row, col + 3, person.email)
                    write_a_cell(row, col + 4, person.mobile)
                    if is_under18(person.dob):
                        write_a_cell(row, col + 5, 'Under 18')
                        write_a_cell(row, col + 6, 'Under 18', True)
                    else:
                        write_a_cell(row, col + 5, person.wwc_number)
                        write_a_date(row, col + 6, person.wwc_expiry)
                    write_a_cell(row, col + 7, hba_mpd_signed(person))

                write_a_cell(row, 0, 'Shooters Basketball Club')
                write_a_cell(row, 1, team.team_name)
                write_a_cell(row, 2, compname)

                write_one_person(row, 3, coach)
                write_one_person(row, 11, team_manager)

                row += 1

            fixup_column_widths()

            workbook.close()
            return os.EX_OK

        except KeyboardInterrupt:
            print('\nGot Interrupted!')
            return os.EX_SOFTWARE


def main():
    '''function suitable for running via setuptools entry point'''
    return Main.setuptools_entry()


if __name__ == '__main__':
    sys.exit(main())
