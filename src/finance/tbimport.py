#!/usr/bin/env python2.7
# encoding: utf-8
'''
finance.tbimport -- import Trybooking "Account Transactions" CSV report file(s)

CSV file must be edited to contain only Date, Transaction, Description, Debit,
and Credit columns, and to remove header and trailer garbage rows

Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@author:     Murray Jensen

@copyright:  2016 Murray Jensen. All rights reserved.

@license:    GPLv3

@contact:    mjj@jensen-williams.id.au
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
import csv
import json
import os
import sqlite3
import sys


__all__ = []
__version__ = 0.1
__date__ = '2016-04-29'
__updated__ = '$Date$'.split()[0]

DEBUG_RUN = 1
TEST_RUN = 0
PROFILE_RUN = 0


class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg

    def __str__(self):
        return self.msg

    def __unicode__(self):
        return self.msg


def main(argv=None):
    '''Command line options.'''

    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (
        program_version, program_build_date)
    program_doclines = __import__('__main__').__doc__.split("\n")
    program_shortdesc = program_doclines[1]
    program_longdesc = program_doclines[3:]
    program_license = '''%s

  Created by Murray Jensen on %s.
  Copyright 2016 Murray Jensen. All rights reserved.

  Licensed under the GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v",
            "--verbose",
            dest="verbose",
            action="count",
            help="set verbosity level [default: %(default)s]")
        parser.add_argument(
            '-V',
            '--version',
            action='version',
            version=program_version_message)
        parser.add_argument('csvfile', nargs='+')

        # Process arguments
        args = parser.parse_args()

        if args.verbose > 0:
            print("Verbose mode on")

        with open('config.json', 'r') as fd:
            config = json.load(fd)

        for csvfile in args.csvlist:
            with open(csvfile) as fd:
                reader = csv.DictReader(fd)
                for d in reader:
                    print d

        with sqlite3.connect(config['file']) as conn:
            try:
                c = conn.cursor()
                c.execute('')
                conn.commit()
            except:
                conn.rollback()

        return os.EX_OK
    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return os.EX_USAGE

if __name__ == "__main__":
    if DEBUG_RUN:
        sys.argv.append("--help")
    if TEST_RUN:
        import doctest
        doctest.testmod()
    if PROFILE_RUN:
        import cProfile
        import pstats
        profile_filename = 'finance.tbimport_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(os.EX_OK)
    sys.exit(main())
