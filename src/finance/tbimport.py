#!/usr/bin/env python2.7
# encoding: utf-8
'''
finance.tbimport -- import Trybooking "Account Transactions" CSV report file(s)

Note: basic program outline generated by PyDev (Eclipse plugin) via New->PyDev
      Module command and the "CLI (optparse)" Module template

@author:     Murray Jensen
@copyright:  2016 Murray Jensen. All rights reserved.
@license:    GPLv3
@contact:    mjj@jensen-williams.id.au
'''
from __future__ import print_function

from argparse import ArgumentParser, RawDescriptionHelpFormatter
import csv
from datetime import datetime
from logging import getLogger, basicConfig
import os
from sqlalchemy.sql.expression import update
import sys
from traceback import print_exception, format_exc

from sbcilib.financedb import SbciFinanceDB, SbciTransactionType


__all__ = []
__version__ = 0.1
__date__ = '2016-04-29'
__updated__ = '$Date$'.split()[0]

_logger = getLogger(__file__)

DEBUG_RUN = 1
TEST_RUN = 0
PROFILE_RUN = 0


def main(argv=None):
    '''Command line options.'''

    basicConfig()

    if argv is not None:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (
        program_version, program_build_date)
    program_doclines = __import__('__main__').__doc__.split("\n")
    program_shortdesc = program_doclines[1]
    program_longdesc = program_doclines[3:]  # @UnusedVariable
    program_license = '''%s

  Created by Murray Jensen on %s.
  Copyright 2016 Murray Jensen. All rights reserved.

  Licensed under the GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v",
            "--verbose",
            dest="verbose",
            action="count",
            help="set verbosity level [default: %(default)s]")
        parser.add_argument(
            '-V',
            '--version',
            action='version',
            version=program_version_message)
        parser.add_argument('csvlist', nargs='+')
        # Process arguments
        args = parser.parse_args()
    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK
    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return os.EX_USAGE

    if args.verbose > 0:
        print("Verbose mode on")
        print("CSV file list = {}".format(args.csvlist))

    try:
        try:
            db = SbciFinanceDB(args.verbose)
        except UnicodeEncodeError:
            print_exception(*sys.exc_info())
            raise

        # for r in db.trybooking_query.limit(10).all():
        #     print(
        #         '{}({}),{}({}),{}({}),{}({}),{}({})'.format(
        #               r.date, type(r.date),
        #               r.type, type(r.type),
        #               r.description, type(r.description),
        #               r.debit, type(r.debit),
        #               r.credit, type(r.credit),
        #         )
        #     )

        for csvfile in args.csvlist:

            with open(csvfile) as fd:

                # skip crap at start of file
                pos = fd.tell()
                skipped_lines = 0
                while not fd.readline().startswith('Date'):
                    pos = fd.tell()
                    skipped_lines += 1
                fd.seek(pos)

                reader = csv.DictReader(fd)
                for d in reader:
                    if d['Date'].startswith('Total'):
                        break

                    # 26Apr2016 02:07 PM
                    date, ttype, description, debit, credit = (
                        datetime.strptime(d['Date'], '%d%b%Y %H:%M %p'),
                        SbciTransactionType.by_csvvalue(d['Transaction']),
                        unicode(d['Description'], encoding='latin-1'),
                        float(d['Debit'].replace(',', '')),
                        float(d['Credit'].replace(',', '')),
                    )

                    maybe_dups = db.trybooking_query.filter(
                        db.Trybooking.type == ttype.csvvalue,
                        db.Trybooking.description == description,
                        db.Trybooking.debit == debit,
                        db.Trybooking.credit == credit
                    ).all()

                    found_dup = False
                    for maybe_dup in maybe_dups:
                        if maybe_dup.date.date() == date.date():
                            # print('DUPLICATE!! {}'.format(maybe_dup))
                            if found_dup:
                                raise RuntimeError('matched more than one!')
                            if maybe_dup.date != date:
                                print(
                                    'Updated date: {} => {}'.format(
                                        maybe_dup.date, date
                                    )
                                )
                                stmt = update(db.Trybooking).where(
                                    db.Trybooking.id == maybe_dup.id
                                ).values(date=date)
                                db.engine.connect().execute(stmt)
                            found_dup = True

                    if not found_dup:
                        print(
                            'NEW RECORD: {},{},{},{},{}'.format(
                                date, ttype,
                                description.encode('utf-8'),
                                debit, credit
                            )
                        )
                        # db.dbsession.add()

        return os.EX_OK

    except KeyboardInterrupt:
        # handle keyboard interrupt
        return os.EX_OK

    except Exception as e:
        if DEBUG_RUN or TEST_RUN:
            print(format_exc())
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return os.EX_USAGE


if __name__ == "__main__":
    if TEST_RUN:
        import doctest
        doctest.testmod()
    if PROFILE_RUN:
        import cProfile
        import pstats
        profile_filename = 'finance.tbimport_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(os.EX_OK)
    sys.exit(main())
