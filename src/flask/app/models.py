# coding: utf-8
"""

You can use the extra Flask-AppBuilder fields and Mixin's

AuditMixin will add automatic timestamp of created and modified by who


"""
from sqlalchemy.orm import relationship, backref
from sqlalchemy.sql.schema import CheckConstraint, Column, ForeignKey,\
    FetchedValue
from sqlalchemy.sql.sqltypes import Integer, String, Text, DateTime, LargeBinary

from flask_appbuilder.models.mixins import AuditMixin
from flask_appbuilder.models.sqla import Model


#
# code below generated by flask-sqlacodegen - except for relationships I added
#
class Competition(AuditMixin, Model):
    __tablename__ = 'competitions'
    __table_args__ = (
        CheckConstraint(u'age_group in (9,10,12,14,16,18,20,21)'),
        CheckConstraint(u"gender in ('F','M')"),
        CheckConstraint(u'section >= 1 and section <= 15')
    )

    id = Column(Integer, primary_key=True)
    gender = Column(String, nullable=False)
    age_group = Column(Integer, nullable=False)
    section = Column(Integer, nullable=False)


class Person(AuditMixin, Model):
    __tablename__ = 'people'

    id = Column(Integer, primary_key=True)
    name = Column(Text, nullable=False)
    email = Column(Text)
    mobile = Column(Text)
    wwc_number = Column(Text)
    wwc_expiry = Column(DateTime)
    postal_address = Column(Text)
    photo = Column(LargeBinary)
    dob = Column(DateTime)
    bv_mpd_expiry = Column(DateTime)


class TSession(AuditMixin, Model):
    __tablename__ = 'sessions'
    __table_args__ = (
        CheckConstraint(u"active in ('false', 'true')"),
        CheckConstraint(u"day in ('None','Monday','Tuesday','Wednesday',"
                        u"'Thursday','Friday','Sunday')"),
        CheckConstraint(u'duration in (0,45,60)'),
        CheckConstraint(u"time in ('None','3.30pm','3.45pm','4.00pm',"
                        u"'4.15pm','4.30pm','4.45pm','5.00pm','5.15pm',"
                        u"'5.30pm','5.45pm','6.00pm','6.15pm','6.30pm',"
                        u"'6.45pm','7.00pm','7.15pm','7.30pm','7.45pm',"
                        u"'8.00pm','8.15pm','8.30pm','9.00pm','9.15pm')")
    )

    venue_id = Column(Integer, ForeignKey('venues.id'), nullable=False)
    venue = relationship('Venue', backref=backref('venue_sessions', lazy=True),
                         foreign_keys=[venue_id])
    day = Column(Text, nullable=False)
    time = Column(Text, nullable=False)
    duration = Column(Integer, nullable=False)
    id = Column(Integer, primary_key=True)
    active = Column(Text, nullable=False, server_default=FetchedValue())


class Team(AuditMixin, Model):
    __tablename__ = 'teams'
    __table_args__ = (
        CheckConstraint(u"active in ('false','true')"),
        CheckConstraint(u"fspstate in ('','C','T','CT','N','CN','TN','CTN')")
    )

    team_name = Column(Text, primary_key=True)
    competition_id = Column(Integer, ForeignKey('competitions.id'),
                            nullable=False)
    competition = relationship('Competition',
                               backref=backref('competition_teams', lazy=True),
                               foreign_keys=[competition_id])
    team_manager_id = Column(Integer, ForeignKey('people.id'))
    team_manager = relationship('Person',
                                backref=backref('team_manager_teams',
                                                lazy=True),
                                foreign_keys=[team_manager_id])
    coach_id = Column(Integer, ForeignKey('people.id'))
    coach = relationship('Person', backref=backref('coach_teams', lazy=True),
                         foreign_keys=[coach_id])
    asst_coach_id = Column(Integer, ForeignKey('people.id'))
    asst_coach = relationship('Person',
                              backref=backref('asst_coach_teams', lazy=True),
                              foreign_keys=[asst_coach_id])
    session_id = Column(Integer, ForeignKey('sessions.id'))
    session = relationship('TSession',
                           backref=backref('session_teams', lazy=True),
                           foreign_keys=[session_id])
    old_session_id = Column(Integer, ForeignKey('sessions.id'),
                            server_default=FetchedValue())
    old_session = relationship('TSession',
                               backref=backref('old_session_teams', lazy=True),
                               foreign_keys=[old_session_id])
    last_season_info = Column(Text)
    active = Column(Text, nullable=False, server_default=FetchedValue())
    fspstate = Column(String, server_default=FetchedValue())
    fspcode = Column(Text)
    fsppass = Column(Text)


class Venue(AuditMixin, Model):
    __tablename__ = 'venues'
    __table_args__ = (
        CheckConstraint(u'max_teams in (0,1,2)'),
    )

    id = Column(Integer, primary_key=True)
    name = Column(Text, nullable=False)
    max_teams = Column(Integer, nullable=False)
    abbrev = Column(Text, nullable=False)
